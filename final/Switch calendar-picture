import utime
from machine import I2C, Pin, RTC
import json
import network
import urequests
from ssd1306 import SSD1306_I2C
import framebuf

# ========== CONFIGURACIÓN OLED, BOTÓN Y RTC ==========
i2c = I2C(0, scl=Pin(1), sda=Pin(0))  # Ajusta pines para tu placa
oled = SSD1306_I2C(130, 64, i2c,)      # Asegúrate del tamaño real de tu OLED
rtc = RTC()
boton = Pin(7, Pin.IN, Pin.PULL_UP)

# ========== ESTADO ==========
ventana_actual = 1
ultimo_presionado = 0
DEBOUNCE_MS = 300

# ========== SINCRONIZAR HORA ==========
def sincronizar_hora_con_api(rtc):
    try:
        with open('config.json') as archivo:
            configuracion = json.load(archivo)

        api_key = configuracion['date_time_api']
        zona_horaria = configuracion['time_zone']

        url = f'http://api.ipgeolocation.io/timezone?apiKey={api_key}&tz={zona_horaria}'
        respuesta = urequests.get(url)
        datos = respuesta.json()
        print("Respuesta de la API:", datos)

        if 'date_time' in datos:
            hora_actual = datos["date_time"]
            fecha, hora = hora_actual.split(" ")
            anio, mes, dia = map(int, fecha.split("-"))
            horas, minutos, segundos = map(int, hora.split(":"))
            dia_semana = datos.get("day_of_week", 0)
            rtc.datetime((anio, mes, dia, dia_semana, horas, minutos, segundos, 0))
            print("RTC actualizado:", rtc.datetime())
        else:
            print("Error: No se encontró la hora.")
    except Exception as e:
        print("algo esta pasando pero funciona no se que es este numero:", e)

# ========== MOSTRAR IMAGEN ==========
def mostrar_ventana_imagen():
    oled.fill(0)


    miku = bytearray([
 #// 'artworks-000071746406-8016ef-t500x500', 130x64px
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf8, 0x07, 0xe7, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x07, 0xf8, 0x00, 0x1f, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x80, 0x7f, 0xff, 0x80, 0x67, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x80, 0x7f, 0xff, 0xc0, 
0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x01, 0xff, 0xff, 
0xe0, 0x1b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x03, 0xc7, 
0xff, 0xf0, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x03, 
0xc7, 0xff, 0xf0, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 
0x03, 0xbf, 0xfc, 0x70, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xe7, 0x02, 0x7f, 0xff, 0x38, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xe7, 0x04, 0xff, 0xff, 0x98, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xe7, 0x05, 0xfd, 0xff, 0xc8, 0x39, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xef, 0x0d, 0xfd, 0xff, 0xcc, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xef, 0x09, 0xf1, 0xff, 0xec, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x0b, 0xe5, 0xef, 0xf4, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x8b, 0xdd, 0xe7, 0xf4, 0x7c, 0x7f, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x1b, 0xbd, 0xdd, 0xf6, 0x1e, 0x7f, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8c, 0x1b, 0xbd, 0xdc, 0xf6, 0x0e, 0x7f, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x1b, 0xbe, 0xdf, 0x76, 0x06, 0x7f, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x18, 0x18, 0x0e, 0xdc, 0x16, 0x07, 
0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x18, 0x06, 0x18, 0x06, 
0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x18, 0x02, 0x18, 
0x06, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x19, 0x83, 
0x18, 0x66, 0x07, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x19, 
0x83, 0x18, 0x66, 0x07, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 
0x09, 0xe3, 0xd1, 0xe4, 0x07, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0xf8, 0x09, 0xe7, 0xf9, 0xe4, 0x07, 0xef, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xfd, 0xfc, 0x0a, 0x4f, 0xfc, 0x94, 0x07, 0xef, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xfd, 0xfc, 0x01, 0xff, 0xff, 0xe0, 0x07, 0xef, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xf3, 0xfc, 0xf0, 0xff, 0xff, 0xc3, 0xcf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xf3, 0xfc, 0xf8, 0x7f, 0xff, 0x87, 0xef, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xf3, 0xfd, 0xf8, 0xff, 0xff, 0xc7, 0xef, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfd, 0xff, 0xf0, 0x03, 0xff, 0xef, 0xf3, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfd, 0xff, 0xdc, 0xce, 0xff, 0xef, 0xf3, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 0xda, 0x16, 0xff, 0x9f, 0xf9, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 0xf8, 0xc7, 0xff, 0x9f, 0xf9, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 0xb0, 0xc3, 0x7f, 0x9f, 
0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 0x80, 0xc0, 0x7f, 
0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfe, 0x7f, 0x01, 0xe0, 
0x3f, 0x9f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0x7e, 0x00, 
0xc0, 0x1f, 0xbf, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0x3c, 
0x00, 0x00, 0x0f, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 
0x3e, 0x00, 0x00, 0x1f, 0x3f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 
0xff, 0x3f, 0x03, 0x30, 0x3f, 0x37, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xe7, 0xfc, 0x9f, 0x80, 0x00, 0x7e, 0x47, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xe7, 0xfc, 0x1f, 0x80, 0x00, 0x7e, 0x07, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xe7, 0xfc, 0x1f, 0xc6, 0x18, 0xfe, 0x07, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xe7, 0xfc, 0x9f, 0xde, 0xde, 0xfe, 0x47, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xe7, 0xfc, 0x9f, 0xdf, 0x3e, 0xfe, 0x47, 0xf9, 0xff, 0xff, 0xff, 0xff, 
0xc0, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfc, 0xdf, 0xdf, 0xbe, 0xfe, 0xc7, 0xf9, 0xff, 0xff, 0xff, 
0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfc, 0xff, 0xdf, 0x3e, 0xff, 0xc7, 0xf3, 0xff, 0xff, 
0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfc, 0xff, 0xc0, 0x00, 0xff, 0xc7, 0xf3, 0xff, 
0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfc, 0xff, 0xc0, 0x00, 0xff, 0xc7, 0xf3, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0e, 0x7f, 0xe2, 0x11, 0xff, 0x9e, 
0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0e, 0x7f, 0xe0, 0x01, 0xff, 
0x9c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xe0, 0x01, 
0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xe0, 
0x01, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0])

    buf = framebuf.FrameBuffer(miku, 130, 64, framebuf.MONO_HLSB)
    oled.blit(buf, 0, 0)  # Centrado aproximado
    oled.show()
# ========== MOSTRAR HORA Y FECHA ==========
def mostrar_ventana_hora_fecha():
    ahora = rtc.datetime()
    hora_actual = f"{ahora[4]:02}:{ahora[5]:02}:{ahora[6]:02}"
    fecha_actual = f"{ahora[2]:02}/{ahora[1]:02}/{ahora[0]}"
    oled.fill(0)
    oled.text("Hora:", 30, 5)
    oled.text(hora_actual, 30, 20)
    oled.text("Fecha:", 30, 35)
    oled.text(fecha_actual, 30, 50)
    oled.show()

# ========== CAMBIO DE VENTANA ==========
def cambiar_ventana(pin):
    global ventana_actual, ultimo_presionado
    ahora = utime.ticks_ms()
    if utime.ticks_diff(ahora, ultimo_presionado) > DEBOUNCE_MS:
        ventana_actual = 2 if ventana_actual == 1 else 1
        ultimo_presionado = ahora

boton.irq(trigger=Pin.IRQ_FALLING, handler=cambiar_ventana)

# ========== PROGRAMA PRINCIPAL ==========
def main():
    sincronizar_hora_con_api(rtc)

    while True:
        if ventana_actual == 1:
            mostrar_ventana_imagen()
        else:
            mostrar_ventana_hora_fecha()
        utime.sleep(1)

main()


